Traceback (most recent call last):
  File "/home/aram/miniconda3/lib/python3.13/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
    ~~~~~~~~~~~~~~~~~~~~~~~~^^
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/aram/miniconda3/lib/python3.13/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
    ~~~~~~~~~^
        nb,
        ^^^
    ...<4 lines>...
        **kwargs,
        ^^^^^^^^^
    )
    ^
  File "/home/aram/miniconda3/lib/python3.13/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "/home/aram/miniconda3/lib/python3.13/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "/home/aram/miniconda3/lib/python3.13/asyncio/base_events.py", line 725, in run_until_complete
    return future.result()
           ~~~~~~~~~~~~~^^
  File "/home/aram/miniconda3/lib/python3.13/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
        cell, index, execution_count=self.code_cells_executed + 1
    )
  File "/home/aram/miniconda3/lib/python3.13/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/aram/miniconda3/lib/python3.13/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import pandas as pd
import plotly.graph_objects as go

# Load the data
df = pd.read_csv('table5_whale-only_bycatch_data.csv')

# Get unique years and sort them
years = df['Calendar Year'].unique()
years.sort()

# Create traces for each year
traces = []
for year in years:
    year_df = df[df['Calendar Year'] == year]
    trace = go.Densitymapbox(
        lat=year_df['LATITUDE (5Â° cell)'],
        lon=year_df['LONGITUDE (5Â° cell)'],
        z=year_df['Observed Mortality rate (per set)'],
        radius=10,
        visible=(year == years[0]),  # Only first year visible initially
        colorbar=dict(
            title='Mortality Rate per Set',
            titleside='right'
        ),
        hovertext=year_df['Species (or group)'],
        hovertemplate='<b>Species:</b> %{hovertext}<br>' +
                      '<b>Lat:</b> %{lat:.1f}Â°<br>' +
                      '<b>Lon:</b> %{lon:.1f}Â°<br>' +
                      '<b>Mortality Rate:</b> %{z:.6f}<extra></extra>'
    )
    traces.append(trace)

# Create slider steps
slider_steps = []
for i, year in enumerate(years):
    slider_steps.append({
        'method': 'update',
        'args': [
            {'visible': [i == j for j in range(len(traces))]},
            {'title': 'Whale Bycatch Mortality Rate Heatmap'}
        ],
        'label': str(year)
    })

# Create the figure
fig = go.Figure(
    data=traces,
    layout=go.Layout(
        title='Whale Bycatch Mortality Rate Heatmap',
        mapbox=dict(
            accesstoken='pk.eyJ1IjoicnRob21hc2oiLCJhIjoiY21iejRtNzlnMWtndTJqczFvMXpramZrNiJ9.jsM767FfF1Z0GB1v_ns-qQ',
            style='carto-positron',
            center=dict(lat=0, lon=180),
            zoom=2
        ),
        sliders=[{
            'active': 0,
            'currentvalue': {'prefix': 'Year: '},
            'steps': slider_steps
        }],
        margin={'t': 50, 'r': 20, 'b': 20, 'l': 20}
    )
)

# Update layout for better visualization
fig.update_layout(
    width=1000,
    height=700,
    mapbox_style="carto-positron",
    mapbox_center_lon=180
)

# Add caption above the slider
fig.add_annotation(
    x=0.5, y=-0.1,
    xref='paper', yref='paper',
    xanchor='center',
    yanchor='top',
    text='Drag the slider to view mortality rates by year',
    showarrow=False
)

fig.show()
------------------


[31m---------------------------------------------------------------------------[39m
[31mModuleNotFoundError[39m                       Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[1][39m[32m, line 1[39m
[32m----> [39m[32m1[39m [38;5;28;01mimport[39;00m[38;5;250m [39m[34;01mpandas[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[34;01mpd[39;00m
[32m      2[39m [38;5;28;01mimport[39;00m[38;5;250m [39m[34;01mplotly[39;00m[34;01m.[39;00m[34;01mgraph_objects[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[34;01mgo[39;00m
[32m      4[39m [38;5;66;03m# Load the data[39;00m

[31mModuleNotFoundError[39m: No module named 'pandas'

