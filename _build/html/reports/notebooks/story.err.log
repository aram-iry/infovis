Traceback (most recent call last):
  File "/home/aram/miniconda3/lib/python3.13/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
    ~~~~~~~~~~~~~~~~~~~~~~~~^^
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/aram/miniconda3/lib/python3.13/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
    ~~~~~~~~~^
        nb,
        ^^^
    ...<4 lines>...
        **kwargs,
        ^^^^^^^^^
    )
    ^
  File "/home/aram/miniconda3/lib/python3.13/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "/home/aram/miniconda3/lib/python3.13/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "/home/aram/miniconda3/lib/python3.13/asyncio/base_events.py", line 725, in run_until_complete
    return future.result()
           ~~~~~~~~~~~~~^^
  File "/home/aram/miniconda3/lib/python3.13/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
        cell, index, execution_count=self.code_cells_executed + 1
    )
  File "/home/aram/miniconda3/lib/python3.13/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/aram/miniconda3/lib/python3.13/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
%run ship_strike_risk.ipynb
------------------


[31m---------------------------------------------------------------------------[39m
[31mFileNotFoundError[39m                         Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[4][39m[32m, line 1[39m
[32m----> [39m[32m1[39m [43mget_ipython[49m[43m([49m[43m)[49m[43m.[49m[43mrun_line_magic[49m[43m([49m[33;43m'[39;49m[33;43mrun[39;49m[33;43m'[39;49m[43m,[49m[43m [49m[33;43m'[39;49m[33;43mship_strike_risk.ipynb[39;49m[33;43m'[39;49m[43m)[49m

[36mFile [39m[32m~/miniconda3/lib/python3.13/site-packages/IPython/core/interactiveshell.py:2488[39m, in [36mInteractiveShell.run_line_magic[39m[34m(self, magic_name, line, _stack_depth)[39m
[32m   2486[39m     kwargs[[33m'[39m[33mlocal_ns[39m[33m'[39m] = [38;5;28mself[39m.get_local_scope(stack_depth)
[32m   2487[39m [38;5;28;01mwith[39;00m [38;5;28mself[39m.builtin_trap:
[32m-> [39m[32m2488[39m     result = [43mfn[49m[43m([49m[43m*[49m[43margs[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43mkwargs[49m[43m)[49m
[32m   2490[39m [38;5;66;03m# The code below prevents the output from being displayed[39;00m
[32m   2491[39m [38;5;66;03m# when using magics with decorator @output_can_be_silenced[39;00m
[32m   2492[39m [38;5;66;03m# when the last Python token in the expression is a ';'.[39;00m
[32m   2493[39m [38;5;28;01mif[39;00m [38;5;28mgetattr[39m(fn, magic.MAGIC_OUTPUT_CAN_BE_SILENCED, [38;5;28;01mFalse[39;00m):

[36mFile [39m[32m~/miniconda3/lib/python3.13/site-packages/IPython/core/magics/execution.py:748[39m, in [36mExecutionMagics.run[39m[34m(self, parameter_s, runner, file_finder)[39m
[32m    746[39m     [38;5;28;01mwith[39;00m preserve_keys([38;5;28mself[39m.shell.user_ns, [33m'[39m[33m__file__[39m[33m'[39m):
[32m    747[39m         [38;5;28mself[39m.shell.user_ns[[33m'[39m[33m__file__[39m[33m'[39m] = filename
[32m--> [39m[32m748[39m         [38;5;28;43mself[39;49m[43m.[49m[43mshell[49m[43m.[49m[43msafe_execfile_ipy[49m[43m([49m[43mfilename[49m[43m,[49m[43m [49m[43mraise_exceptions[49m[43m=[49m[38;5;28;43;01mTrue[39;49;00m[43m)[49m
[32m    749[39m     [38;5;28;01mreturn[39;00m
[32m    751[39m [38;5;66;03m# Control the response to exit() calls made by the script being run[39;00m

[36mFile [39m[32m~/miniconda3/lib/python3.13/site-packages/IPython/core/interactiveshell.py:2979[39m, in [36mInteractiveShell.safe_execfile_ipy[39m[34m(self, fname, shell_futures, raise_exceptions)[39m
[32m   2977[39m result = [38;5;28mself[39m.run_cell(cell, silent=[38;5;28;01mTrue[39;00m, shell_futures=shell_futures)
[32m   2978[39m [38;5;28;01mif[39;00m raise_exceptions:
[32m-> [39m[32m2979[39m     [43mresult[49m[43m.[49m[43mraise_error[49m[43m([49m[43m)[49m
[32m   2980[39m [38;5;28;01melif[39;00m [38;5;129;01mnot[39;00m result.success:
[32m   2981[39m     [38;5;28;01mbreak[39;00m

[36mFile [39m[32m~/miniconda3/lib/python3.13/site-packages/IPython/core/interactiveshell.py:310[39m, in [36mExecutionResult.raise_error[39m[34m(self)[39m
[32m    308[39m     [38;5;28;01mraise[39;00m [38;5;28mself[39m.error_before_exec
[32m    309[39m [38;5;28;01mif[39;00m [38;5;28mself[39m.error_in_exec [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[32m--> [39m[32m310[39m     [38;5;28;01mraise[39;00m [38;5;28mself[39m.error_in_exec

    [31m[... skipping hidden 1 frame][39m

[36mFile [39m[32m/tmp/ipykernel_14737/2117757156.py:5[39m
[32m      2[39m [38;5;28;01mimport[39;00m[38;5;250m [39m[34;01mplotly[39;00m[34;01m.[39;00m[34;01mgraph_objects[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[34;01mgo[39;00m
[32m      4[39m [38;5;66;03m# Load the data[39;00m
[32m----> [39m[32m5[39m df = [43mpd[49m[43m.[49m[43mread_csv[49m[43m([49m[33;43m'[39;49m[33;43m..data/aggregated_whale_data.csv[39;49m[33;43m'[39;49m[43m)[49m
[32m      7[39m blue_gradient = [
[32m      8[39m     [[32m0.0[39m, [33m'[39m[33m#b3e0ff[39m[33m'[39m], 
[32m      9[39m     [[32m0.36[39m, [33m'[39m[33m#5b8cff[39m[33m'[39m],
[32m     10[39m     [[32m0.7[39m, [33m'[39m[33m#3a5ba0[39m[33m'[39m],  
[32m     11[39m     [[32m1.0[39m, [33m'[39m[33m#0a2463[39m[33m'[39m]  
[32m     12[39m ]
[32m     14[39m fig = go.Figure(go.Densitymap(
[32m     15[39m     lat=df[[33m'[39m[33mlat_bin[39m[33m'[39m],
[32m     16[39m     lon=df[[33m'[39m[33mlon_bin[39m[33m'[39m],
[32m   (...)[39m[32m     30[39m                   [33m'[39m[33m<b>Risk Index:</b> [39m[33m%[39m[38;5;132;01m{z:.2f}[39;00m[33m<extra></extra>[39m[33m'[39m
[32m     31[39m ))

[36mFile [39m[32m~/miniconda3/lib/python3.13/site-packages/pandas/io/parsers/readers.py:1026[39m, in [36mread_csv[39m[34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)[39m
[32m   1013[39m kwds_defaults = _refine_defaults_read(
[32m   1014[39m     dialect,
[32m   1015[39m     delimiter,
[32m   (...)[39m[32m   1022[39m     dtype_backend=dtype_backend,
[32m   1023[39m )
[32m   1024[39m kwds.update(kwds_defaults)
[32m-> [39m[32m1026[39m [38;5;28;01mreturn[39;00m [43m_read[49m[43m([49m[43mfilepath_or_buffer[49m[43m,[49m[43m [49m[43mkwds[49m[43m)[49m

[36mFile [39m[32m~/miniconda3/lib/python3.13/site-packages/pandas/io/parsers/readers.py:620[39m, in [36m_read[39m[34m(filepath_or_buffer, kwds)[39m
[32m    617[39m _validate_names(kwds.get([33m"[39m[33mnames[39m[33m"[39m, [38;5;28;01mNone[39;00m))
[32m    619[39m [38;5;66;03m# Create the parser.[39;00m
[32m--> [39m[32m620[39m parser = [43mTextFileReader[49m[43m([49m[43mfilepath_or_buffer[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43mkwds[49m[43m)[49m
[32m    622[39m [38;5;28;01mif[39;00m chunksize [38;5;129;01mor[39;00m iterator:
[32m    623[39m     [38;5;28;01mreturn[39;00m parser

[36mFile [39m[32m~/miniconda3/lib/python3.13/site-packages/pandas/io/parsers/readers.py:1620[39m, in [36mTextFileReader.__init__[39m[34m(self, f, engine, **kwds)[39m
[32m   1617[39m     [38;5;28mself[39m.options[[33m"[39m[33mhas_index_names[39m[33m"[39m] = kwds[[33m"[39m[33mhas_index_names[39m[33m"[39m]
[32m   1619[39m [38;5;28mself[39m.handles: IOHandles | [38;5;28;01mNone[39;00m = [38;5;28;01mNone[39;00m
[32m-> [39m[32m1620[39m [38;5;28mself[39m._engine = [38;5;28;43mself[39;49m[43m.[49m[43m_make_engine[49m[43m([49m[43mf[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[43m.[49m[43mengine[49m[43m)[49m

[36mFile [39m[32m~/miniconda3/lib/python3.13/site-packages/pandas/io/parsers/readers.py:1880[39m, in [36mTextFileReader._make_engine[39m[34m(self, f, engine)[39m
[32m   1878[39m     [38;5;28;01mif[39;00m [33m"[39m[33mb[39m[33m"[39m [38;5;129;01mnot[39;00m [38;5;129;01min[39;00m mode:
[32m   1879[39m         mode += [33m"[39m[33mb[39m[33m"[39m
[32m-> [39m[32m1880[39m [38;5;28mself[39m.handles = [43mget_handle[49m[43m([49m
[32m   1881[39m [43m    [49m[43mf[49m[43m,[49m
[32m   1882[39m [43m    [49m[43mmode[49m[43m,[49m
[32m   1883[39m [43m    [49m[43mencoding[49m[43m=[49m[38;5;28;43mself[39;49m[43m.[49m[43moptions[49m[43m.[49m[43mget[49m[43m([49m[33;43m"[39;49m[33;43mencoding[39;49m[33;43m"[39;49m[43m,[49m[43m [49m[38;5;28;43;01mNone[39;49;00m[43m)[49m[43m,[49m
[32m   1884[39m [43m    [49m[43mcompression[49m[43m=[49m[38;5;28;43mself[39;49m[43m.[49m[43moptions[49m[43m.[49m[43mget[49m[43m([49m[33;43m"[39;49m[33;43mcompression[39;49m[33;43m"[39;49m[43m,[49m[43m [49m[38;5;28;43;01mNone[39;49;00m[43m)[49m[43m,[49m
[32m   1885[39m [43m    [49m[43mmemory_map[49m[43m=[49m[38;5;28;43mself[39;49m[43m.[49m[43moptions[49m[43m.[49m[43mget[49m[43m([49m[33;43m"[39;49m[33;43mmemory_map[39;49m[33;43m"[39;49m[43m,[49m[43m [49m[38;5;28;43;01mFalse[39;49;00m[43m)[49m[43m,[49m
[32m   1886[39m [43m    [49m[43mis_text[49m[43m=[49m[43mis_text[49m[43m,[49m
[32m   1887[39m [43m    [49m[43merrors[49m[43m=[49m[38;5;28;43mself[39;49m[43m.[49m[43moptions[49m[43m.[49m[43mget[49m[43m([49m[33;43m"[39;49m[33;43mencoding_errors[39;49m[33;43m"[39;49m[43m,[49m[43m [49m[33;43m"[39;49m[33;43mstrict[39;49m[33;43m"[39;49m[43m)[49m[43m,[49m
[32m   1888[39m [43m    [49m[43mstorage_options[49m[43m=[49m[38;5;28;43mself[39;49m[43m.[49m[43moptions[49m[43m.[49m[43mget[49m[43m([49m[33;43m"[39;49m[33;43mstorage_options[39;49m[33;43m"[39;49m[43m,[49m[43m [49m[38;5;28;43;01mNone[39;49;00m[43m)[49m[43m,[49m
[32m   1889[39m [43m[49m[43m)[49m
[32m   1890[39m [38;5;28;01massert[39;00m [38;5;28mself[39m.handles [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m
[32m   1891[39m f = [38;5;28mself[39m.handles.handle

[36mFile [39m[32m~/miniconda3/lib/python3.13/site-packages/pandas/io/common.py:873[39m, in [36mget_handle[39m[34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)[39m
[32m    868[39m [38;5;28;01melif[39;00m [38;5;28misinstance[39m(handle, [38;5;28mstr[39m):
[32m    869[39m     [38;5;66;03m# Check whether the filename is to be opened in binary mode.[39;00m
[32m    870[39m     [38;5;66;03m# Binary mode does not support 'encoding' and 'newline'.[39;00m
[32m    871[39m     [38;5;28;01mif[39;00m ioargs.encoding [38;5;129;01mand[39;00m [33m"[39m[33mb[39m[33m"[39m [38;5;129;01mnot[39;00m [38;5;129;01min[39;00m ioargs.mode:
[32m    872[39m         [38;5;66;03m# Encoding[39;00m
[32m--> [39m[32m873[39m         handle = [38;5;28;43mopen[39;49m[43m([49m
[32m    874[39m [43m            [49m[43mhandle[49m[43m,[49m
[32m    875[39m [43m            [49m[43mioargs[49m[43m.[49m[43mmode[49m[43m,[49m
[32m    876[39m [43m            [49m[43mencoding[49m[43m=[49m[43mioargs[49m[43m.[49m[43mencoding[49m[43m,[49m
[32m    877[39m [43m            [49m[43merrors[49m[43m=[49m[43merrors[49m[43m,[49m
[32m    878[39m [43m            [49m[43mnewline[49m[43m=[49m[33;43m"[39;49m[33;43m"[39;49m[43m,[49m
[32m    879[39m [43m        [49m[43m)[49m
[32m    880[39m     [38;5;28;01melse[39;00m:
[32m    881[39m         [38;5;66;03m# Binary mode[39;00m
[32m    882[39m         handle = [38;5;28mopen[39m(handle, ioargs.mode)

[31mFileNotFoundError[39m: [Errno 2] No such file or directory: '..data/aggregated_whale_data.csv'

